#include <iostream>
#include <vector>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <cstdint>

#include "../../include/AtomicityChecker.h"

using namespace std;

//int main(int argc, char** argv)
int main()
{
	AtomicityChecker ac = AtomicityChecker();
	//AtomicityChecker ac = AtomicityChecker( unordered_map<uint32_t, unordered_set<uint32_t>>( { { 7, unordered_set<uint32_t>( {1, 7} ) }, { 3, unordered_set<uint32_t>( { 1, 3} ) } } ) );

	//cout << ac.toString() << endl;

	vector<string> base_ssrs( {
		"A",
		"AA",
		"AAA",
		"AAAA",
		"AAAAA",
		"AAAAAA",
		"AAAAAAA",
		"AAAAAAAA",
		"AAAAAAAAA",
		"AAAAAAAAAA",
		"AAAAAAAAAAA",
		"AAAAAAAAAAAA",
		"AT",
		"ATAT",
		"ATATAT",
		"ATATATAT",
		"ATATATATAT",
		"ATATATATATAT",
		"ATATATATATATAT",
		"ATATATATATATATAT",
		"ATATATATATATATATAT",
		"ATATATATATATATATATAT",
		"ATATATATATATATATATATAT",
		"ATATATATATATATATATATATAT",
		"ATC",
		"ATCATC",
		"ATCATCATC",
		"ATCATCATCATC",
		"ATCATCATCATCATC",
		"ATCATCATCATCATCATC",
		"ATCATCATCATCATCATCATC",
		"ATCATCATCATCATCATCATCATC",
		"ATCATCATCATCATCATCATCATCATC",
		"ATCATCATCATCATCATCATCATCATCATC",
		"ATCATCATCATCATCATCATCATCATCATCATC",
		"ATCATCATCATCATCATCATCATCATCATCATCATC",
		"ATCG",
		"ATCGATCG",
		"ATCGATCGATCG",
		"ATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCGATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCGATCGATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCG",
		"ATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCG",
		"ATCGG",
		"ATCGGATCGG",
		"ATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGG",
		"ATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGGATCGG",
		"ATCGGT",
		"ATCGGTATCGGT",
		"ATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGTATCGGT",
		"ATCGGTC",
		"ATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTCATCGGTC",
		"ATCGGTCG",
		"ATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCGATCGGTCG",
		"ATCGGTCGC",
		"ATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGCATCGGTCGC",
		"ATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCTATCGGTCGCT",
		"ATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTCATCGGTCGCTC",
		"ATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG",
		"ATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCGATCGGTCGCTCG"
	} );

	vector<bool> expected;
	
	for (uint32_t i = 0; i < base_ssrs.size(); ++i)
	{
		if (i % 12)
		{
			expected.push_back(false);
		}
		else
		{
			expected.push_back(true);
		}
	}

	uint32_t passed_counter = 0;	

	for (uint32_t i = 0; i < base_ssrs.size(); ++i)
	{
		cout << "AtomicityChecker Test #" << i + 1 << ":\t";
		if (expected[i] == ac.isAtomic(base_ssrs[i]))
		{
			++passed_counter;
			cout << "OK";
		}
		else
		{
			cout << "FAIL";
		}
		cout << endl;
		
		//cout << base_ssrs[i] << ": " << ac.isAtomic(base_ssrs[i]) << endl;
	}

	cout << "AtomicityChecker Passed: " << passed_counter << " / " << base_ssrs.size() << endl;
	
	//cout << ac.toString() << endl;

	return 0;
}
